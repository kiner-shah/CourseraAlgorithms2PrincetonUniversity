// Variable length codes: use different number of bits to encode different chars

// Morse code: ...---...
// What does the above code mean?
//	SOS?
//	V7?
//	IAMIE?
//	EEWNI?
// In practice, use a medium gap to separate codewords

// How do we avoid ambiguity? Ensure that no codeword is a prefix of another
// Fixed-length code
// Append special stop char to each codeword
// General prefix-free code

// How to represent prefix-free code?
// A binary trie
// Characters in leaves - codeword is path from root to leaf

// Compression:
//	1. Method 1: start at leaf; follow path up to the root; print bits in reverse
//	2. Method 2: create a symbol table of key-value pairs
// Expansion:
//	1. Start at root
//	2. Go left if bit is 0; go right if 1
//	3. If lead node, print char and return to root

private static class Node implements Comparable<Node> {
	private char ch;	// unused for internal nodes
	private int freq;	// unused for expand
	private final Node left, right;

	public Node(char ch, int freq, Node left, Node right) {
		this.ch = ch;
		this.freq = freq;
		this.left = left;
		this.right = right;
	}
	public boolean isLeaf() {
		return left != null && right != null;
	}
	public int compareTo(Node that) {
		return this.freq - that.freq;
	}
}
// Running time is linear in input size N
public void expand() {
	Node root = readTrie();	// read in encoding tree
	int N = BinaryStdIn.readInt(); // read in number of chars
	for (int i = 0; i < N; i++) {
		Node x = root;
		while (!x.isLeaf()) {
			if (!BinaryStdIn.readBoolean())
				x = x.left;
			else
				x = x.right;
		}
		BinaryStdOut.write(x.ch, 8);
	}
	BinaryStdOut.close();
}
// Write trie - write preorder traversal of trie; mark leaf and internal nodes with a bit
// Note: if message is long, overhead of transmitting trie is small
private static void writeTrie(Node x) {
	if (x.isLeaf()) {
		BinaryStdOut.write(true);
		BinaryStdOut.write(x.ch, 8);
		return;
	}
	BinaryStdOut.write(false);
	writeTrie(x.left);
	writeTrie(x.right);
}
private static Node readTrie() {
	if (BinaryStdIn.readBoolean()) {
		char c = BinaryStdIn.readChar(8);
		return new Node(c, 0, null, null);
	}
	Node x = readTrie();
	Node y = readTrie();
	return new Node('\0', 0, x, y); // \0 not used for internal nodes
}

// How to find best prefix-free code?
// Shannon-Fano algorithm:
//	1. Partition symbols S into two subsets S0 and S1 of (roughly) equal frequency
//	2. Codewords for symbols in S0 start with 0; for symbols in S1 start with 1
//	3. Recur in S0 and S1
// Problem 1: how to divide up symbols?
// Problem 2: not optimal!

// Huffman algorithm
// Count frequency for each	character in input
// Start with one node corresponding to each character with weight equal to frequency
// Merge into single trie with cumulative weight:
//	1. select two tries with min weight freq[i] and freq[j]
//	2. merge into single trie with weight freq[i] + freq[j]

private static Node buildTrie(int[] freq) {
	MinPQ<Node> pq = new MinPQ<Node>();
	for (char i = 0; i < R; i++)	// initialize PQ with singleton tries
		if (freq[i] > 0)
			pq.insert(new Node(i, freq[i], null, null));
	while (pq.size() > 1) {	// merge two smallest tries
		Node x = pq.delMin();
		Node y = pq.delMin();
		Node parent = new Node('\0', x.freq + y.freq, x, y); // \0 not used for internal nodes
		pq.insert(parent);
	}
	return pq.delMin();
}

// Proposition: Huffman's algorithm produces an optimal prefix-free code (no prefix-free code uses fewer bits)

// Implementation:
//	1. Pass 1 - tabulate char frequencies and build trie
//	2. Pass 2 - encode file by traversing trie or lookup table

// Complexity: using a binary heap: N + R log R