public class Edge implements Comparable<Edge> {
	private final int v, w;
	private final double weight;

	public Edge(int v, int w, double weight) {
		this.v = v;
		this.w = w;
		this.weight = weight;
	}
	public int either() { return v; }
	public int other(int vertex) {
		if (vertex == v) return w;
		else return v;
	}
	public int compareTo(Edge that) {
		if (this.weight < that.weight) return -1;
		else if (this.weight > that.weight) return 1;
		else return 0;
	}
}

public class EdgeWeightedGraph {
	private final int V;
	private final Bag<Edge>[] adj;

	public EdgeWeightedGraph(int V) {
		this.V = V;
		adj = (Bag<Edge>[]) new Bag[V];
		for (int v = 0; v < V; v++) {
			adj[v] = new Bag<Edge>();
		}
	}
	public void addEdge(Edge e) {
		int v = e.either();
		int w = e.other(v);
		adj[v].add(e);
		adj[w].add(e);
	}
	public Iterable<Edge> adj(int v) { return adj[v]; }
}